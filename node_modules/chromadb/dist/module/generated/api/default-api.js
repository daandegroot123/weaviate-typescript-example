/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Delete
         * @param {string} collectionName
         * @param {DeleteEmbedding} deleteEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (collectionName, deleteEmbedding, options = {}) => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('_delete', 'collectionName', collectionName);
            // verify required parameter 'deleteEmbedding' is not null or undefined
            assertParamExists('_delete', 'deleteEmbedding', deleteEmbedding);
            const localVarPath = `/api/v1/collections/{collection_name}/delete`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(deleteEmbedding, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Add
         * @param {string} collectionName
         * @param {AddEmbedding} addEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add: async (collectionName, addEmbedding, options = {}) => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('add', 'collectionName', collectionName);
            // verify required parameter 'addEmbedding' is not null or undefined
            assertParamExists('add', 'addEmbedding', addEmbedding);
            const localVarPath = `/api/v1/collections/{collection_name}/add`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(addEmbedding, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Count
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        count: async (collectionName, options = {}) => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('count', 'collectionName', collectionName);
            const localVarPath = `/api/v1/collections/{collection_name}/count`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create Collection
         * @param {CreateCollection} createCollection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: async (createCollection, options = {}) => {
            // verify required parameter 'createCollection' is not null or undefined
            assertParamExists('createCollection', 'createCollection', createCollection);
            const localVarPath = `/api/v1/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(createCollection, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create Index
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndex: async (collectionName, options = {}) => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('createIndex', 'collectionName', collectionName);
            const localVarPath = `/api/v1/collections/{collection_name}/create_index`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete Collection
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection: async (collectionName, options = {}) => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('deleteCollection', 'collectionName', collectionName);
            const localVarPath = `/api/v1/collections/{collection_name}`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get
         * @param {any} collectionName
         * @param {GetEmbedding} getEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (collectionName, getEmbedding, options = {}) => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('get', 'collectionName', collectionName);
            // verify required parameter 'getEmbedding' is not null or undefined
            assertParamExists('get', 'getEmbedding', getEmbedding);
            const localVarPath = `/api/v1/collections/{collection_name}/get`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(getEmbedding, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Collection
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollection: async (collectionName, options = {}) => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('getCollection', 'collectionName', collectionName);
            const localVarPath = `/api/v1/collections/{collection_name}`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Nearest Neighbors
         * @param {any} collectionName
         * @param {QueryEmbedding} queryEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNearestNeighbors: async (collectionName, queryEmbedding, options = {}) => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('getNearestNeighbors', 'collectionName', collectionName);
            // verify required parameter 'queryEmbedding' is not null or undefined
            assertParamExists('getNearestNeighbors', 'queryEmbedding', queryEmbedding);
            const localVarPath = `/api/v1/collections/{collection_name}/query`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(queryEmbedding, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List Collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: async (options = {}) => {
            const localVarPath = `/api/v1/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Persist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        persist: async (options = {}) => {
            const localVarPath = `/api/v1/persist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Raw Sql
         * @param {RawSql} rawSql
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rawSql: async (rawSql, options = {}) => {
            // verify required parameter 'rawSql' is not null or undefined
            assertParamExists('rawSql', 'rawSql', rawSql);
            const localVarPath = `/api/v1/raw_sql`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(rawSql, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reset: async (options = {}) => {
            const localVarPath = `/api/v1/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        root: async (options = {}) => {
            const localVarPath = `/api/v1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update
         * @param {string} collectionName
         * @param {UpdateEmbedding} updateEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (collectionName, updateEmbedding, options = {}) => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('update', 'collectionName', collectionName);
            // verify required parameter 'updateEmbedding' is not null or undefined
            assertParamExists('update', 'updateEmbedding', updateEmbedding);
            const localVarPath = `/api/v1/collections/{collection_name}/update`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmbedding, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Collection
         * @param {any} collectionName
         * @param {UpdateCollection} updateCollection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollection: async (collectionName, updateCollection, options = {}) => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('updateCollection', 'collectionName', collectionName);
            // verify required parameter 'updateCollection' is not null or undefined
            assertParamExists('updateCollection', 'updateCollection', updateCollection);
            const localVarPath = `/api/v1/collections/{collection_name}`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(updateCollection, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Delete
         * @param {string} collectionName
         * @param {DeleteEmbedding} deleteEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(collectionName, deleteEmbedding, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(collectionName, deleteEmbedding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Add
         * @param {string} collectionName
         * @param {AddEmbedding} addEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add(collectionName, addEmbedding, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(collectionName, addEmbedding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Count
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async count(collectionName, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.count(collectionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create Collection
         * @param {CreateCollection} createCollection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCollection(createCollection, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCollection(createCollection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create Index
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIndex(collectionName, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIndex(collectionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Delete Collection
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCollection(collectionName, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCollection(collectionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get
         * @param {any} collectionName
         * @param {GetEmbedding} getEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(collectionName, getEmbedding, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(collectionName, getEmbedding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Collection
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollection(collectionName, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollection(collectionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Nearest Neighbors
         * @param {any} collectionName
         * @param {QueryEmbedding} queryEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNearestNeighbors(collectionName, queryEmbedding, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNearestNeighbors(collectionName, queryEmbedding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary List Collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCollections(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCollections(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Persist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async persist(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.persist(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Raw Sql
         * @param {RawSql} rawSql
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rawSql(rawSql, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rawSql(rawSql, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reset(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reset(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async root(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.root(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update
         * @param {string} collectionName
         * @param {UpdateEmbedding} updateEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(collectionName, updateEmbedding, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(collectionName, updateEmbedding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update Collection
         * @param {any} collectionName
         * @param {UpdateCollection} updateCollection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCollection(collectionName, updateCollection, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCollection(collectionName, updateCollection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DefaultApiFp(configuration);
    return {
        /**
         *
         * @summary Delete
         * @param {string} collectionName
         * @param {DeleteEmbedding} deleteEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(collectionName, deleteEmbedding, options) {
            return localVarFp._delete(collectionName, deleteEmbedding, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Add
         * @param {string} collectionName
         * @param {AddEmbedding} addEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(collectionName, addEmbedding, options) {
            return localVarFp.add(collectionName, addEmbedding, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Count
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        count(collectionName, options) {
            return localVarFp.count(collectionName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create Collection
         * @param {CreateCollection} createCollection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection(createCollection, options) {
            return localVarFp.createCollection(createCollection, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create Index
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndex(collectionName, options) {
            return localVarFp.createIndex(collectionName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete Collection
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection(collectionName, options) {
            return localVarFp.deleteCollection(collectionName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get
         * @param {any} collectionName
         * @param {GetEmbedding} getEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(collectionName, getEmbedding, options) {
            return localVarFp.get(collectionName, getEmbedding, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Collection
         * @param {string} collectionName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollection(collectionName, options) {
            return localVarFp.getCollection(collectionName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Nearest Neighbors
         * @param {any} collectionName
         * @param {QueryEmbedding} queryEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNearestNeighbors(collectionName, queryEmbedding, options) {
            return localVarFp.getNearestNeighbors(collectionName, queryEmbedding, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List Collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections(options) {
            return localVarFp.listCollections(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Persist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        persist(options) {
            return localVarFp.persist(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Raw Sql
         * @param {RawSql} rawSql
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rawSql(rawSql, options) {
            return localVarFp.rawSql(rawSql, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reset(options) {
            return localVarFp.reset(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        root(options) {
            return localVarFp.root(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update
         * @param {string} collectionName
         * @param {UpdateEmbedding} updateEmbedding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(collectionName, updateEmbedding, options) {
            return localVarFp.update(collectionName, updateEmbedding, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Collection
         * @param {any} collectionName
         * @param {UpdateCollection} updateCollection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollection(collectionName, updateCollection, options) {
            return localVarFp.updateCollection(collectionName, updateCollection, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Delete
     * @param {DefaultApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    _delete(requestParameters, options) {
        return DefaultApiFp(this.configuration)._delete(requestParameters.collectionName, requestParameters.deleteEmbedding, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Add
     * @param {DefaultApiAddRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    add(requestParameters, options) {
        return DefaultApiFp(this.configuration).add(requestParameters.collectionName, requestParameters.addEmbedding, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Count
     * @param {DefaultApiCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    count(requestParameters, options) {
        return DefaultApiFp(this.configuration).count(requestParameters.collectionName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create Collection
     * @param {DefaultApiCreateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createCollection(requestParameters, options) {
        return DefaultApiFp(this.configuration).createCollection(requestParameters.createCollection, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create Index
     * @param {DefaultApiCreateIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createIndex(requestParameters, options) {
        return DefaultApiFp(this.configuration).createIndex(requestParameters.collectionName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete Collection
     * @param {DefaultApiDeleteCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteCollection(requestParameters, options) {
        return DefaultApiFp(this.configuration).deleteCollection(requestParameters.collectionName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get
     * @param {DefaultApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    get(requestParameters, options) {
        return DefaultApiFp(this.configuration).get(requestParameters.collectionName, requestParameters.getEmbedding, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Collection
     * @param {DefaultApiGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCollection(requestParameters, options) {
        return DefaultApiFp(this.configuration).getCollection(requestParameters.collectionName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Nearest Neighbors
     * @param {DefaultApiGetNearestNeighborsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getNearestNeighbors(requestParameters, options) {
        return DefaultApiFp(this.configuration).getNearestNeighbors(requestParameters.collectionName, requestParameters.queryEmbedding, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listCollections(options) {
        return DefaultApiFp(this.configuration).listCollections(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Persist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    persist(options) {
        return DefaultApiFp(this.configuration).persist(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Raw Sql
     * @param {DefaultApiRawSqlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    rawSql(requestParameters, options) {
        return DefaultApiFp(this.configuration).rawSql(requestParameters.rawSql, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    reset(options) {
        return DefaultApiFp(this.configuration).reset(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    root(options) {
        return DefaultApiFp(this.configuration).root(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update
     * @param {DefaultApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    update(requestParameters, options) {
        return DefaultApiFp(this.configuration).update(requestParameters.collectionName, requestParameters.updateEmbedding, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update Collection
     * @param {DefaultApiUpdateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateCollection(requestParameters, options) {
        return DefaultApiFp(this.configuration).updateCollection(requestParameters.collectionName, requestParameters.updateCollection, options).then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=default-api.js.map