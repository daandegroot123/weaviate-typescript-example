/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AddEmbedding } from '../models';
import { CreateCollection } from '../models';
import { DeleteEmbedding } from '../models';
import { GetEmbedding } from '../models';
import { QueryEmbedding } from '../models';
import { RawSql } from '../models';
import { UpdateCollection } from '../models';
import { UpdateEmbedding } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete
     * @param {string} collectionName
     * @param {DeleteEmbedding} deleteEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: (collectionName: string, deleteEmbedding: DeleteEmbedding, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add
     * @param {string} collectionName
     * @param {AddEmbedding} addEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add: (collectionName: string, addEmbedding: AddEmbedding, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Count
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    count: (collectionName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create Collection
     * @param {CreateCollection} createCollection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection: (createCollection: CreateCollection, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create Index
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIndex: (collectionName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollection: (collectionName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get
     * @param {any} collectionName
     * @param {GetEmbedding} getEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get: (collectionName: any, getEmbedding: GetEmbedding, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection: (collectionName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Nearest Neighbors
     * @param {any} collectionName
     * @param {QueryEmbedding} queryEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNearestNeighbors: (collectionName: any, queryEmbedding: QueryEmbedding, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollections: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Persist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    persist: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Raw Sql
     * @param {RawSql} rawSql
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rawSql: (rawSql: RawSql, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reset: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    root: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update
     * @param {string} collectionName
     * @param {UpdateEmbedding} updateEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: (collectionName: string, updateEmbedding: UpdateEmbedding, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Collection
     * @param {any} collectionName
     * @param {UpdateCollection} updateCollection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollection: (collectionName: any, updateCollection: UpdateCollection, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete
     * @param {string} collectionName
     * @param {DeleteEmbedding} deleteEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(collectionName: string, deleteEmbedding: DeleteEmbedding, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Add
     * @param {string} collectionName
     * @param {AddEmbedding} addEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add(collectionName: string, addEmbedding: AddEmbedding, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Count
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    count(collectionName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Create Collection
     * @param {CreateCollection} createCollection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection(createCollection: CreateCollection, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Create Index
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIndex(collectionName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Delete Collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollection(collectionName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Get
     * @param {any} collectionName
     * @param {GetEmbedding} getEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(collectionName: any, getEmbedding: GetEmbedding, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Get Collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection(collectionName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Get Nearest Neighbors
     * @param {any} collectionName
     * @param {QueryEmbedding} queryEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNearestNeighbors(collectionName: any, queryEmbedding: QueryEmbedding, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary List Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollections(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Persist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    persist(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Raw Sql
     * @param {RawSql} rawSql
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rawSql(rawSql: RawSql, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reset(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    root(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Update
     * @param {string} collectionName
     * @param {UpdateEmbedding} updateEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(collectionName: string, updateEmbedding: UpdateEmbedding, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Update Collection
     * @param {any} collectionName
     * @param {UpdateCollection} updateCollection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollection(collectionName: any, updateCollection: UpdateCollection, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete
     * @param {string} collectionName
     * @param {DeleteEmbedding} deleteEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(collectionName: string, deleteEmbedding: DeleteEmbedding, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Add
     * @param {string} collectionName
     * @param {AddEmbedding} addEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add(collectionName: string, addEmbedding: AddEmbedding, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Count
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    count(collectionName: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Create Collection
     * @param {CreateCollection} createCollection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection(createCollection: CreateCollection, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Create Index
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIndex(collectionName: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Delete Collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollection(collectionName: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get
     * @param {any} collectionName
     * @param {GetEmbedding} getEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(collectionName: any, getEmbedding: GetEmbedding, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get Collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection(collectionName: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get Nearest Neighbors
     * @param {any} collectionName
     * @param {QueryEmbedding} queryEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNearestNeighbors(collectionName: any, queryEmbedding: QueryEmbedding, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary List Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollections(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Persist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    persist(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Raw Sql
     * @param {RawSql} rawSql
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rawSql(rawSql: RawSql, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reset(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    root(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Update
     * @param {string} collectionName
     * @param {UpdateEmbedding} updateEmbedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(collectionName: string, updateEmbedding: UpdateEmbedding, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Update Collection
     * @param {any} collectionName
     * @param {UpdateCollection} updateCollection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollection(collectionName: any, updateCollection: UpdateCollection, options?: any): AxiosPromise<any>;
};
/**
 * Request parameters for _delete operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteRequest
 */
export interface DefaultApiDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof DefaultApiDelete
     */
    readonly collectionName: string;
    /**
     *
     * @type {DeleteEmbedding}
     * @memberof DefaultApiDelete
     */
    readonly deleteEmbedding: DeleteEmbedding;
}
/**
 * Request parameters for add operation in DefaultApi.
 * @export
 * @interface DefaultApiAddRequest
 */
export interface DefaultApiAddRequest {
    /**
     *
     * @type {string}
     * @memberof DefaultApiAdd
     */
    readonly collectionName: string;
    /**
     *
     * @type {AddEmbedding}
     * @memberof DefaultApiAdd
     */
    readonly addEmbedding: AddEmbedding;
}
/**
 * Request parameters for count operation in DefaultApi.
 * @export
 * @interface DefaultApiCountRequest
 */
export interface DefaultApiCountRequest {
    /**
     *
     * @type {string}
     * @memberof DefaultApiCount
     */
    readonly collectionName: string;
}
/**
 * Request parameters for createCollection operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateCollectionRequest
 */
export interface DefaultApiCreateCollectionRequest {
    /**
     *
     * @type {CreateCollection}
     * @memberof DefaultApiCreateCollection
     */
    readonly createCollection: CreateCollection;
}
/**
 * Request parameters for createIndex operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateIndexRequest
 */
export interface DefaultApiCreateIndexRequest {
    /**
     *
     * @type {string}
     * @memberof DefaultApiCreateIndex
     */
    readonly collectionName: string;
}
/**
 * Request parameters for deleteCollection operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteCollectionRequest
 */
export interface DefaultApiDeleteCollectionRequest {
    /**
     *
     * @type {string}
     * @memberof DefaultApiDeleteCollection
     */
    readonly collectionName: string;
}
/**
 * Request parameters for get operation in DefaultApi.
 * @export
 * @interface DefaultApiGetRequest
 */
export interface DefaultApiGetRequest {
    /**
     *
     * @type {any}
     * @memberof DefaultApiGet
     */
    readonly collectionName: any;
    /**
     *
     * @type {GetEmbedding}
     * @memberof DefaultApiGet
     */
    readonly getEmbedding: GetEmbedding;
}
/**
 * Request parameters for getCollection operation in DefaultApi.
 * @export
 * @interface DefaultApiGetCollectionRequest
 */
export interface DefaultApiGetCollectionRequest {
    /**
     *
     * @type {string}
     * @memberof DefaultApiGetCollection
     */
    readonly collectionName: string;
}
/**
 * Request parameters for getNearestNeighbors operation in DefaultApi.
 * @export
 * @interface DefaultApiGetNearestNeighborsRequest
 */
export interface DefaultApiGetNearestNeighborsRequest {
    /**
     *
     * @type {any}
     * @memberof DefaultApiGetNearestNeighbors
     */
    readonly collectionName: any;
    /**
     *
     * @type {QueryEmbedding}
     * @memberof DefaultApiGetNearestNeighbors
     */
    readonly queryEmbedding: QueryEmbedding;
}
/**
 * Request parameters for rawSql operation in DefaultApi.
 * @export
 * @interface DefaultApiRawSqlRequest
 */
export interface DefaultApiRawSqlRequest {
    /**
     *
     * @type {RawSql}
     * @memberof DefaultApiRawSql
     */
    readonly rawSql: RawSql;
}
/**
 * Request parameters for update operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateRequest
 */
export interface DefaultApiUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof DefaultApiUpdate
     */
    readonly collectionName: string;
    /**
     *
     * @type {UpdateEmbedding}
     * @memberof DefaultApiUpdate
     */
    readonly updateEmbedding: UpdateEmbedding;
}
/**
 * Request parameters for updateCollection operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateCollectionRequest
 */
export interface DefaultApiUpdateCollectionRequest {
    /**
     *
     * @type {any}
     * @memberof DefaultApiUpdateCollection
     */
    readonly collectionName: any;
    /**
     *
     * @type {UpdateCollection}
     * @memberof DefaultApiUpdateCollection
     */
    readonly updateCollection: UpdateCollection;
}
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Delete
     * @param {DefaultApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    _delete(requestParameters: DefaultApiDeleteRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Add
     * @param {DefaultApiAddRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    add(requestParameters: DefaultApiAddRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Count
     * @param {DefaultApiCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    count(requestParameters: DefaultApiCountRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Create Collection
     * @param {DefaultApiCreateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createCollection(requestParameters: DefaultApiCreateCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Create Index
     * @param {DefaultApiCreateIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createIndex(requestParameters: DefaultApiCreateIndexRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Delete Collection
     * @param {DefaultApiDeleteCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteCollection(requestParameters: DefaultApiDeleteCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Get
     * @param {DefaultApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    get(requestParameters: DefaultApiGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Get Collection
     * @param {DefaultApiGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCollection(requestParameters: DefaultApiGetCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Get Nearest Neighbors
     * @param {DefaultApiGetNearestNeighborsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getNearestNeighbors(requestParameters: DefaultApiGetNearestNeighborsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary List Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listCollections(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Persist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    persist(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Raw Sql
     * @param {DefaultApiRawSqlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    rawSql(requestParameters: DefaultApiRawSqlRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    reset(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    root(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Update
     * @param {DefaultApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    update(requestParameters: DefaultApiUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Update Collection
     * @param {DefaultApiUpdateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateCollection(requestParameters: DefaultApiUpdateCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
//# sourceMappingURL=default-api.d.ts.map